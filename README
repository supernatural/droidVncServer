# coding=UTF-8

目标设备
    Nexus 5
    CM13 daily build (Android 6.0)

目前状态
    可以编译成可执行程序，可运行
    图像可正常刷新，略慢
    鼠标单击可传入，但无法移动，键盘不工作

已知
    FB:
        默认实现不工作，图像是乱的        
            原因是内存中实际宽度是1088像素，比屏幕宽度多了4像素共32字节
            解决办法是从FB读取到数据后，每行裁剪掉8个像素，这个方法比较耗费资源
            或者设置屏幕宽度时按照1088像素（这样会有一个黑边），节省了裁剪时内存拷贝操作
        修正后，图像显示的不是当前图像，而是上半部红底，并带有Cyanonganmod字样，下半部黑色
        初步怀疑系统不是用的FB的驱动方式，而Recovery模式用的FB驱动，导致读取到的是上次recovery模式刷入的数据
    flinger:
        参考screencap更新了一下代码，编译了sdk 23版本，可以运行，屏幕显示正常
            使用raw编码传输时，1080x1920每帧需要8M多，带宽严重不足，1.5秒刷新一次
            使用zrle/hextile时，降低到2M每帧，每秒可刷新3-4帧，主要瓶颈在手机端压缩效率，需300-400ms
            降低分辨率后，可明显降低每帧的大小，但对整体刷新频率影响不大，显示效果略差

其他
    抓屏软件生成mp4时速度很快，可以达到每秒几十帧，带宽只需每秒500k左右 (540x960分辨率下)
    

=========================================================================================================


The droid-VNC-server projects consists in three main modules parts: the daemon, wrapper libs and the GUI.

- Daemon -
Provides the vnc server functionality, injects input/touch events, clipboard management, etc
Available in jni/ folder

- Wrapper libs -
Compiled against the AOSP so everyone can build the daemon/GUI without having to fetch +2GB files.
Currently there are 2 wrappers, gralloc and flinger.

Available in nativeMethods/ folder, and precompiled libs in nativeMethods/lib/

- GUI - 
GUI handles user-friendly control.
Connects to the daemon using local IPC.

-------------- Compile C daemon ---------------------
On project folder:
  $ ndk-build
  $ ./updateExecsAndLibs.sh

-------------- Compile Wrapper libs -----------------
  $ cd <aosp_folder>
  $ . build/envsetup.sh
  $ lunch
  $ ln -s <droid-vnc-folder>/nativeMethods/ external/

To build:
  $ cd external/nativeMethods
  $ mm .
  $ cd <droid-vnc-folder>
  $ ./updateExecsAndLibs.sh

